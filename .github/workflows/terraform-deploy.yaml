name: "Terraform Deploy"
 
on:
  push:
    branches: [ main ]
  pull_request: 

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
 terraform:
   name: "Terraform Plan - Apply"
   runs-on: ubuntu-latest
   defaults:
     run: 
      working-directory: ./terraform

   steps:
   - name: Checkout the repository to the runner
     uses: actions/checkout@v2
      
   - name: Setup Terraform with specified version on the runner
     uses: hashicorp/setup-terraform@v2
     with:
      terraform_version: 1.3.0 
    
   - name: Terraform init
     id: init
     run: terraform init -backend-config='bucket=${{ secrets.BUCKET_TF_STATE}}' -backend-config='key=${{ secrets.TF_STATE_KEY }}' -backend-config='region=${{ secrets.AWS_REGION }}' -backend-config='dynamodb_table=${{ secrets.AWS_DYNAMODB_TABLE }}'

   - name: Terraform format
     id: fmt
     run: terraform fmt -check
      
   - name: Terraform validate
     id: validate
     run: terraform validate

   - name: Terraform Plan
     id: plan
     if: github.event_name == 'pull_request'
     run: terraform plan -var 'ecr_container_image_url=${{ secrets.AWS_ECR_CONTAINER_IMAGE_URL }}' -var 'ecs_container_name=${{ secrets.AWS_ECS_CONTAINER_NAME }}' -no-color -input=false -out tf.plan
     continue-on-error: true

   - name: Terraform Show
     id: show
     run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt


   - uses: actions/github-script@v6
     if: github.event_name == 'pull_request'
     with:
      script: |
        const fs = require("fs");
        const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
        const maxGitHubBodyCharacters = 65536;

        function chunkSubstr(str, size) {
          const numChunks = Math.ceil(str.length / size)
          const chunks = new Array(numChunks)
          for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
            chunks[i] = str.substr(o, size)
          }
          return chunks
        }

          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
        
  
   - name: Terraform Plan Status
     if: steps.plan.outcome == 'failure'
     run: exit 1
  
   - name: Terraform Apply
     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
     run: terraform apply -input=false tf.plan
