name: Build image and deploy to Amazon ECR

on:
  push:
    branches: [ main ]

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
jobs:
  # deploy:
  #   name: Build image
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./flask-web-app

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_REGION }}
        

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Create .env file
  #     run: |
  #       touch .env
  #       echo API_KEY=${{ secrets.API_KEY }} > .env
  #   - name: Build, tag, and push the image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  #       IMAGE_TAG: ${{ secrets.AWS_IMAGE_TAG }}
  #     run: |
  #       # Build a docker container and push it to ECR 
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #       echo "Pushing image to ECR..."
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

   release:
    name: Terraform apply
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./terraform

    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0 

    - name: Terraform init
      id: init
      run: terraform init -backend-config='bucket=${{ secrets.BUCKET_TF_STATE}}' -backend-config='key=${{ secrets.TF_STATE_KEY }}' -backend-config='region=${{ secrets.AWS_REGION }}' -backend-config='dynamodb_table=${{ secrets.AWS_DYNAMODB_TABLE }}'

    #  - name: Download Build Artifact
    #   #  if: github.event_name == 'push'
    #    uses: actions/download-artifact@v3
    #    with:
    #       name: artifact  
    #       path: ${{ github.workspace }}/tfplanoutput

    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: terraform-deploy.yml
        workflow_conclusion: success
    
    - name: Terraform Apply
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -input=false tf.plan

      
      

    
