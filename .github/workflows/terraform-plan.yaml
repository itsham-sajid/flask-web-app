name: "Terraform Plan"
 
on:
  push:
    branches:
      - main

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
 terraform:
   name: "Terraform Plan"
   runs-on: ubuntu-latest
   defaults:
     run: 
      working-directory: ./terraform

   steps:
   - name: Checkout the repository to the runner
     uses: actions/checkout@v2
      
   - name: Setup Terraform with specified version on the runner
     uses: hashicorp/setup-terraform@v2
     with:
      terraform_version: 1.3.0 
    
   - name: Terraform init
     id: init
     run: terraform init -backend-config='bucket=${{ secrets.BUCKET_TF_STATE}}' -backend-config='key=${{ secrets.TF_STATE_KEY }}' -backend-config='region=${{ secrets.AWS_REGION }}' -backend-config='dynamodb_table=${{ secrets.AWS_DYNAMODB_TABLE }}'

   - name: Create Artifact Folder 
     if: github.event_name == 'pull_request'
     shell: bash
     run: |
        sudo mkdir -p -m777 ${{ github.workspace }}/tfplanoutput

   - name: Terraform format
     id: fmt
     run: terraform fmt -check
      
   - name: Terraform validate
     id: validate
     run: terraform validate

   - name: Terraform Plan
     id: plan
     if: github.event_name == 'pull_request'
     run: terraform plan -var 'ecr_container_image_url=${{ secrets.AWS_ECR_CONTAINER_IMAGE_URL }}' -var 'ecs_container_name=${{ secrets.AWS_ECS_CONTAINER_NAME }}' -no-color -input=false -out=${{ github.workspace }}/tfplanoutput/tf.plan
     continue-on-error: true

   - name: Upload Artifact
     if: github.event_name == 'pull_request'
     uses: actions/upload-artifact@v3
     with:
      name: artifact
      path: ${{ github.workspace }}/tfplanoutput/
      if-no-files-found: error


  #  - uses: actions/github-script@v6
  #    if: github.event_name == 'pull_request'
  #    env:
  #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #    with:
  #     script: |
  #         const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #         #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #         #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #         #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
  #         <details><summary>Show Plan</summary>
  
  #         \`\`\`\n
  #         ${process.env.PLAN}
  #         \`\`\`
  
  #         </details>
  #         *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
  #         github.rest.issues.createComment({
  #           issue_number: context.issue.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: output
  #         })

   - name: Terraform Plan Status
     if: steps.plan.outcome == 'failure'
     run: exit 1